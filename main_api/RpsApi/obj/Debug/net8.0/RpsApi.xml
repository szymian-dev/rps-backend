<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RpsApi</name>
    </assembly>
    <members>
        <member name="T:RpsApi.Controllers.AuthController">
            <summary>
               Controller for authentication and authorization of users.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.#ctor(RpsApi.Models.Interfaces.IServices.IAuthService)">
            <summary>
               Controller for authentication and authorization of users.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.PostRegister(RpsApi.Models.DataTransferObjects.FrontModels.RegisterRequest)">
            <summary>
             Register new user.
            </summary>
            <param name="request">
                Request with user data.
            </param>
            <returns>
                Response with an access token and a refresh token.
            </returns>
            <response code="200"> User registered successfully. </response>
            <response code="400"> User with that username already exists. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.PostLogin(RpsApi.Models.DataTransferObjects.FrontModels.LoginRequest)">
            <summary>
             Login user.
            </summary>
            <param name="request">
                Request with user data.
            </param>
            <returns>
                Response with an access token and a refresh token.
            </returns>
            <response code="200"> User logged in successfully. </response>
            <response code="400"> User with that username does not exist or password is incorrect. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.PostRefreshToken(RpsApi.Models.DataTransferObjects.FrontModels.RefreshRequest)">
            <summary>
             Refresh access token.
            </summary>
            <param name="request">
               Request with a still valid refresh token and an expired access token.
            </param>
            <returns>
               Response with a new access token and a new refresh token.
            </returns>
            <response code="200"> Access token refreshed successfully. </response>
            <response code="400"> User with that username does not exist </response>
            <response code="401"> Refresh and/or access token is invalid. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.DeleteLogout(RpsApi.Models.DataTransferObjects.FrontModels.LogoutRequest)">
            <summary>
                Logs the user out, revokes refresh token from a specific device or all devices if no device id is provided.
            </summary>
            <param name="request">
                Request with a device id to revoke refresh token from.
            </param>
            <returns>
                True if the refresh token was revoked successfully.
            </returns>
            <response code="200"> User logged out successfully. </response>
            <response code="400"> User with that username does not exist. </response>
            <response code="401"> User is not logged in. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.GetMe">
            <summary>
               Get currently logged-in user data.
            </summary>
            <returns>
                Response with user data.
            </returns>
            <response code="200"> User data retrieved successfully. </response>
            <response code="401"> User is not logged in. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.GetUser(System.Int32)">
            <summary>
                Get user data by id.
            </summary>
            <param name="id">
                ID of the user to get data from.
            </param>
            <returns>
                Response with user data.
            </returns>
            <response code="200"> User data retrieved successfully. </response>
            <response code="401"> User is not logged in. </response>
            <response code="404"> User not found. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.PutMe(RpsApi.Models.DataTransferObjects.FrontModels.UserEditRequest)">
            <summary>
                Edits currently logged-in user data.
            </summary>
            <param name="request">
               Request with new user data.
            </param>
            <returns>
                True if the user data was edited successfully.
            </returns>
            <response code="200"> User data edited successfully. </response>
            <response code="400"> User with that username or email already exists. Invalid password. </response>
            <response code="401"> User is not logged in. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.DeleteMe">
            <summary>
                Deletes currently logged-in user. Revokes all refresh tokens.
            </summary>
            <returns>
               Response with a message if the user was deleted successfully.
            </returns>
            <response code="200"> User deleted successfully. </response>
            <response code="401"> User is not logged in. </response>
        </member>
        <member name="M:RpsApi.Controllers.AuthController.GetSearch(RpsApi.Models.DataTransferObjects.FrontModels.UserSearchRequest)">
            <summary>
                Searches for users by username or email.
            </summary>
            <param name="request">
                Request with search query. 
            </param>
            <returns>
                Response with found users.
            </returns>
            <response code="200"> Users found successfully. </response>
            <response code="401"> User is not logged in. </response>
        </member>
        <member name="T:RpsApi.Controllers.GameController">
            <summary>
                Controller for game related actions.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.GameController.#ctor(RpsApi.Models.Interfaces.IServices.IGameService)">
            <summary>
                Controller for game related actions.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.GameController.PostGame(RpsApi.Models.DataTransferObjects.FrontModels.NewGameRequest)">
            <summary>
                Starts a new game. Challenges another player to a game.
            </summary>
            <param name="request">
                Request with the id of the player to challenge.
            </param>
            <returns>
               Response with the information about the new game.
            </returns>
            <response code="200"> Game started successfully. </response>
            <response code="400"> Player with that id does not exist. </response>
            <response code="401"> Unauthorized. </response>
        </member>
        <member name="M:RpsApi.Controllers.GameController.GetGameInfo(System.Int32)">
            <summary>
                Gets full information about a game.
            </summary>
            <param name="gameId">
                Id of the game.
            </param>
            <returns>
                Response with the information about the game.
            </returns>
            <response code="200"> Game info retrieved successfully. </response>
            <response code="401"> Unauthorized. </response>
            <response code="404"> Game with that id does not exist. </response>
        </member>
        <member name="M:RpsApi.Controllers.GameController.GetUsersGames(RpsApi.Models.DataTransferObjects.FrontModels.GamesRequest)">
            <summary>
                Gets a list of games that the user is participating in.
            </summary>
            <param name="request">
               Request with page number, page size and search filters.
            </param>
            <returns>
              Response with a filtered list of games.
            </returns>
            <response code="200"> Games retrieved successfully. </response>
            <response code="401"> Unauthorized. </response>
        </member>
        <member name="M:RpsApi.Controllers.GameController.PostInvitation(RpsApi.Models.DataTransferObjects.FrontModels.HandleInvitationRequest)">
            <summary>
                Handles an invitation to a game.
            </summary>
            <param name="request">
               Request with the id of the game to accept or decline.
            </param>
            <returns>
               True if the invitation was handled successfully.
            </returns>
            <response code="200"> Invitation handled successfully. </response>
            <response code="400"> Game with that id does not exist. Game has already started or is cancelled </response>
            <response code="401"> Unauthorized </response>
            <response code="403"> User is not a participant of that particular game </response>
        </member>
        <member name="T:RpsApi.Controllers.GesturesController">
            <summary>
                Controller for gesture related actions e.g. uploading and downloading gestures.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.GesturesController.#ctor(RpsApi.Models.Interfaces.IServices.IGesturesService)">
            <summary>
                Controller for gesture related actions e.g. uploading and downloading gestures.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.GesturesController.PostGesture(Microsoft.AspNetCore.Http.IFormFile,System.Int32)">
            <summary>
                Uploads a gesture file to the server. Analyzes the gesture and saves it to the database.
            </summary>
            <param name="file">
               File with the gesture.
            </param>
            <param name="gameId">
              Id of the game that the gesture is for.
            </param>
            <returns>
              Response with the information about the game.
            </returns>
            <response code="200"> Gesture uploaded successfully. </response>
            <response code="400"> Gesture file is invalid. Game with that id does not exist. Game is not in the gesture phase. User has already uploaded a gesture for this game. </response>
            <response code="401"> Unauthorized. </response>
            <response code="403"> User is not a participant in the game. </response>
            <response code="500"> Internal server error or could not get a response from AI Model API </response>
        </member>
        <member name="M:RpsApi.Controllers.GesturesController.GetGesture(System.Int32)">
            <summary>
                Downloads a gesture file from the server.
            </summary>
            <param name="fileId">
              Id of the gesture file.
            </param>
            <returns>
             Response with the gesture file.
            </returns>
            <response code="200"> Gesture file downloaded successfully. </response>
            <response code="401"> Unauthorized. </response>
            <response code="404"> Gesture file with that id does not exist. </response>
            <response code="403"> User is not a participant in the game. </response>
        </member>
        <member name="T:RpsApi.Controllers.StatsController">
            <summary>
                Controller for statistics related actions e.g. getting statistics about the user, leaderboard.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.StatsController.#ctor(RpsApi.Models.Interfaces.IServices.IStatsService)">
            <summary>
                Controller for statistics related actions e.g. getting statistics about the user, leaderboard.
            </summary>
        </member>
        <member name="M:RpsApi.Controllers.StatsController.GetPlayerStats">
            <summary>
                Get the player statistics for the current user.
            </summary>
            <returns>
               Player stats object containing the player statistics.
            </returns>
            <response code="200">Player statistics retrieved successfully</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:RpsApi.Controllers.StatsController.GetLeaderboard(RpsApi.Models.DataTransferObjects.FrontModels.LeaderboardRequest)">
            <summary>
                Get the leaderboard of players.
            </summary>
            <param name="request">
                Request object containing the page number, page size, sort by and order.
            </param>
            <returns>
                Paged response containing the leaderboard of players.
            </returns>
            <response code="200">Leaderboard retrieved successfully</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="T:RpsApi.Migrations.NewBeginning">
            <inheritdoc />
        </member>
        <member name="M:RpsApi.Migrations.NewBeginning.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RpsApi.Migrations.NewBeginning.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RpsApi.Migrations.NewBeginning.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
